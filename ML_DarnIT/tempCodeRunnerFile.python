import sys
import cv2
import pytesseract
import numpy as np
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QFileDialog, QInputDialog
from PyQt5.QtGui import QPixmap, QIcon, QFont
from PyQt5.QtCore import Qt, QSize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from joblib import load
from PyQt5.QtGui import QImage

class ImageUploader(QWidget):
    def __init__(self):
        super().__init__()
        # Set window properties
        self.setWindowTitle('Image Uploader')
        self.setGeometry(200, 200, 500, 600)
        # Create UI elements
        self.image_label = QLabel('No Image Selected')
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setFont(QFont('Arial', 16))
        self.upload_image_button = QPushButton('Upload Image')
        self.upload_image_button.setFont(QFont('Arial', 14))
        self.upload_image_button.clicked.connect(self.show_file_dialog)
        self.process_image_button = QPushButton('Process Image')
        self.process_image_button.setFont(QFont('Arial', 14))
        self.process_image_button.clicked.connect(self.process_image)
        self.select_area_button = QPushButton('Select Area')
        self.select_area_button.setFont(QFont('Arial', 14))
        self.select_area_button.clicked.connect(self.select_area)
        self.text_label = QLabel('')
        self.text_label.setAlignment(Qt.AlignCenter)
        self.text_label.setFont(QFont('Arial', 16))
        self.upload_text_button = QPushButton('Upload Text')
        self.upload_text_button.setFont(QFont('Arial', 14))
        self.upload_text_button.clicked.connect(self.show_text_dialog)
        self.process_text_button = QPushButton('Process Text')
        self.process_text_button.setFont(QFont('Arial', 14))
        self.process_text_button.clicked.connect(self.process_text)
        # Create layout and add UI elements
        self.layout = QVBoxLayout()
        self.layout.addWidget(self.image_label)
        self.layout.addWidget(self.upload_image_button)
        self.layout.addWidget(self.select_area_button)
        self.layout.addWidget(self.process_image_button)
        self.layout.addWidget(self.text_label)
        self.layout.addWidget(self.upload_text_button)
        self.layout.addWidget(self.process_text_button)
        # Set layout for window
        self.setLayout(self.layout)

    def show_file_dialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getOpenFileName(self, 'Open Image', '', 'Image files (*.jpg *.png *.bmp)', options=options)
        if file_name:
            self.image_label.setPixmap(QPixmap(file_name).scaledToWidth(self.width()-50))

    def select_area(self):
        if self.image_label.pixmap() is None:
            return
        image = cv2.imread(file_name)
        r = cv2.selectROI(image)
        self.roi = image[int(r[1]):int(r[1]+r[3]), int(r[0]):int(r[0]+r[2])]
        cv2.imshow('Selected area', self.roi)

    def process_image(self):
        if self.image_label.pixmap() is None:
            return
        if not hasattr(self, 'roi'):
            pixmap = self.image_label.pixmap()
            image = pixmap.toImage()
            image.save('temp.jpg')
            image = cv2.imread('temp.jpg')
        else:
            image = self.roi
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        gray = cv2.medianBlur(gray, 3)
        text = pytesseract.image_to_string(gray)
        self.text_label.setText(text)

    def show_text_dialog(self):
        text, ok = QInputDialog.getText(self, 'Input Text', 'Enter the text:')
        if ok:
            self.text_label.setText(text)

    def process_text(self):
        text = self.text_label.text()
        if not text:
            return
        vectorizer = load('vectorizer.joblib')
        clf = load('clf.joblib')
        X = vectorizer.transform([text])
        pred = clf.predict(X)
        if pred == 0:
            self.text_label.setText('Not a valid document')
        else:
            self.text_label.setText('Valid document')

if __name__ == '__main__':
    app = QApplication(sys.argv)
    uploader = ImageUploader()
    uploader.show()
    sys.exit(app.exec_())